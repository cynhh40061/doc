常用步驟：

    第一次使用加user_name和user_email(*註2)：
        $ git config --global user.name "Niko"
        $ git config --global user.email "niko@clctech.co"


    抓遠端的檔案下來：
        clone方式：
            $ git clone ssh://git@git.clctech.co:7999/gp/dev-env.git
        已經連過只是要更新：
            先比對是否要合併 => $ git fetch
            切換分支        => $ git checkout <branch_name>
            合併(*註4)       => $ git merge <branch_name>
                
            #直接更新 => $ git pull (等同上方fetch+merge(把另一個分支合併到目前切換這個))


    上傳：
        進入專案底下  => $ cd existing-project
        建立 Git 庫    => $ git init
        加入暫存追蹤      => $ git add --all
        commit 本地端      => $ git commit -m "Initial Commit"
        建立遠端連結          => $ git remote add origin ssh://git@git.clctech.co:7999/gp/dev-env.git
        上傳至遠端               => $ git push -u origin master


    上傳已經建立過的Git：
        進入專案底下  => $ cd existing-project
        設定遠端連結  => $ git remote set-url origin ssh://git@git.clctech.co:7999/gp/dev-env.git
        上傳至遠端    => $ git push -u origin --all
        上傳至遠端(加入標籤(說明用)) => $ git push origin --tags

    刪除分支：
        刪除本地分支 => $ git branch -d <branch_name>
        刪除遠端分支 => $ git push --delete <remote_name> <branch_name>




註記：
    1.“origin” 并无特殊含义
        远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 
        同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用，“origin” 是当你运行 git clone 时默认的远程仓库名字。 
        如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。
    
    2.如何避免每次输入密码
        如果你正在使用 HTTPS URL 来推送，Git 服务器会询问用户名与密码。 
        默认情况下它会在终端中提示服务器是否允许你进行推送。

        如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。 
        最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config --global credential.helper cache 来设置它。

    3.上游快捷方式
        当设置好跟踪分支后，可以通过 @{upstream} 或 @{u} 快捷方式来引用它。 
        所以在 master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 git merge @{u} 来取代 git merge origin/master。

    4.另一種合併rebase($ git rebase master)
        Merge 和 rebase 都是合併歷史記錄，但是結果不同。
            Merge
                修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜。
            Rebase
                修改內容的歷史記錄會接在要合併的分支後面，合併後的歷史記錄會比較清楚簡單，但是，會比使用 merge 更容易發生衝突。
                您可以根據團隊的需求分別使用merge 和 rebase 。例如，您想要簡化歷史記錄。
        #詳細流程請參閱：https://backlog.com/git-tutorial/tw/stepup/stepup1_4.html
        #兩者比較請參閱最下方：https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA

    5.本地協定
        使用本地路徑為Git:
            克隆 => $ git clone /opt/git/project.git(Git會直接複製路徑文件，通常用這種方式，較快)
                 => $ git clone file:///opt/git/project.git(Git 会触发平时用于网路传输资料的进程，主要目的是取得一个没有外部参考（extraneous references）或对象（object）的干净版本库副本，通常是在从其他版本控制系统导入后或一些类似情况需要这么做。)

        优点
            基于文件系统的版本库的优点是简单，并且直接使用了现有的文件权限和网络访问权限。
            如果你的团队已经有共享文件系统，建立版本库会十分容易。
            只需要像设置其他共享目录一样，把一个裸版本库的副本放到大家都可以访问的路径，并设置好读/写的权限，就可以了，我们会在 在服务器上搭建 Git 讨论如何导出一个裸版本库。

            这也是快速从别人的工作目录中拉取更新的方法。 
            如果你和别人一起合作一个项目，他想让你从版本库中拉取更新时，运行类似 git pull /home/john/project 的命令比推送到服务再取回简单多了。

        缺点
            这种方法的缺点是，通常共享文件系统比较难配置，并且比起基本的网络连接访问，这不方便从多个位置访问。
            如果你想从家里推送内容，必须先挂载一个远程磁盘，相比网络连接的访问方式，配置不方便，速度也慢。

            值得一提的是，如果你使用的是类似于共享挂载的文件系统时，这个方法不一定是最快的。
            访问本地版本库的速度与你访问数据的速度是一样的。
            在同一个服务器上，如果允许 Git 访问本地硬盘，一般的通过 NFS 访问版本库要比通过 SSH 访问慢。

            最终，这个协议并不保护仓库避免意外的损坏。
            每一个用户都有“远程”目录的完整 shell 权限，没有方法可以阻止他们修改或删除 Git 内部文件和损坏仓库。

    6.


    7.

























